

Problem Statement

Convolutional neural network (CNN) (Any One from the following)

1.  Use any dataset of plant disease and design a plant disease
    detection system using CNN.
2.  Use MNIST Fashion Dataset and create a classifier to classify
    fashion clothing into categories.

Basic classification: Classify images of clothing

    # TensorFlow and tf.keras
    import tensorflow as tf

    # Helper libraries
    import numpy as np
    import matplotlib.pyplot as plt

    print(tf.__version__)

    2.11.0

Import the Fashion MNIST dataset

This guide uses the Fashion MNIST dataset which contains 70,000
grayscale images in 10 categories. The images show individual articles
of clothing at low resolution (28 by 28 pixels), as seen here:

Fashion MNIST is intended as a drop-in replacement for the classic MNIST
dataset—often used as the "Hello, World" of machine learning programs
for computer vision. The MNIST dataset contains images of handwritten
digits (0, 1, 2, etc.) in a format identical to that of the articles of
clothing you'll use here.

This guide uses Fashion MNIST for variety, and because it's a slightly
more challenging problem than regular MNIST. Both datasets are
relatively small and are used to verify that an algorithm works as
expected. They're good starting points to test and debug code.

Here, 60,000 images are used to train the network and 10,000 images to
evaluate how accurately the network learned to classify images. You can
access the Fashion MNIST directly from TensorFlow. Import and load the
Fashion MNIST data directly from TensorFlow:

    fashion_mnist = tf.keras.datasets.fashion_mnist

    (train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

Loading the dataset returns four NumPy arrays:

-   The train_images and train_labels arrays are the training set—the
    data the model uses to learn.
-   The model is tested against the test set, the test_images, and
    test_labels arrays.

The images are 28x28 NumPy arrays, with pixel values ranging from 0 to
255. The labels are an array of integers, ranging from 0 to 9. These
correspond to the class of clothing the image represents:

Each image is mapped to a single label. Since the class names are not
included with the dataset, store them here to use later when plotting
the images:

    class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
                   'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

Explore the data

Let's explore the format of the dataset before training the model. The
following shows there are 60,000 images in the training set, with each
image represented as 28 x 28 pixels:

    train_images.shape

    (60000, 28, 28)

Likewise, there are 60,000 labels in the training set:

    len(train_labels)

    60000

Each label is an integer between 0 and 9:

    train_labels

    array([9, 0, 0, ..., 3, 0, 5], dtype=uint8)

There are 10,000 images in the test set. Again, each image is
represented as 28 x 28 pixels:

    test_images.shape

    (10000, 28, 28)

And the test set contains 10,000 images labels:

    len(test_labels)

    10000

Preprocess the data

The data must be preprocessed before training the network. If you
inspect the first image in the training set, you will see that the pixel
values fall in the range of 0 to 255:

    plt.figure()
    plt.imshow(train_images[0])
    plt.colorbar()
    plt.grid(False)
    plt.show()

[]

Scale these values to a range of 0 to 1 before feeding them to the
neural network model. To do so, divide the values by 255. It's important
that the training set and the testing set be preprocessed in the same
way:

    train_images = train_images / 255.0

    test_images = test_images / 255.0

To verify that the data is in the correct format and that you're ready
to build and train the network, let's display the first 25 images from
the training set and display the class name below each image.

    plt.figure(figsize=(10,10))
    for i in range(25):
        plt.subplot(5,5,i+1)
        plt.xticks([])
        plt.yticks([])
        plt.grid(False)
        plt.imshow(train_images[i], cmap=plt.cm.binary)
        plt.xlabel(class_names[train_labels[i]])
    plt.show()

[]

Build the model

Building the neural network requires configuring the layers of the
model, then compiling the model.

Set up the layers

The basic building block of a neural network is the layer. Layers
extract representations from the data fed into them. Hopefully, these
representations are meaningful for the problem at hand.

Most of deep learning consists of chaining together simple layers. Most
layers, such as tf.keras.layers.Dense, have parameters that are learned
during training.

    model = tf.keras.Sequential([
        tf.keras.layers.Flatten(input_shape=(28, 28)),
        tf.keras.layers.Dense(128, activation='relu'),
        tf.keras.layers.Dense(10)
    ])

The first layer in this network, tf.keras.layers.Flatten, transforms the
format of the images from a two-dimensional array (of 28 by 28 pixels)
to a one-dimensional array (of 28 * 28 = 784 pixels). Think of this
layer as unstacking rows of pixels in the image and lining them up. This
layer has no parameters to learn; it only reformats the data.

After the pixels are flattened, the network consists of a sequence of
two tf.keras.layers.Dense layers. These are densely connected, or fully
connected, neural layers. The first Dense layer has 128 nodes (or
neurons). The second (and last) layer returns a logits array with length
of 10. Each node contains a score that indicates the current image
belongs to one of the 10 classes.

Compile the model

Before the model is ready for training, it needs a few more settings.
These are added during the model's compile step:

-   Loss function —This measures how accurate the model is during
    training. You want to minimize this function to "steer" the model in
    the right direction.
-   Optimizer —This is how the model is updated based on the data it
    sees and its loss function.
-   Metrics —Used to monitor the training and testing steps. The
    following example uses accuracy, the fraction of the images that are
    correctly classified.

    model.compile(optimizer='adam',
                  loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
                  metrics=['accuracy'])

Train the model

Training the neural network model requires the following steps:

1.  Feed the training data to the model. In this example, the training
    data is in the train_images and train_labels arrays.
2.  The model learns to associate images and labels.
3.  You ask the model to make predictions about a test set—in this
    example, the test_images array.
4.  Verify that the predictions match the labels from the test_labels
    array.

Feed the model

To start training, call the model.fit method—so called because it "fits"
the model to the training data:

    model.fit(train_images, train_labels, epochs=30)

    Epoch 1/30
    1875/1875 [==============================] - 5s 2ms/step - loss: 0.5030 - accuracy: 0.8237
    Epoch 2/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.3795 - accuracy: 0.8640
    Epoch 3/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.3400 - accuracy: 0.8763
    Epoch 4/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.3141 - accuracy: 0.8858
    Epoch 5/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.2990 - accuracy: 0.8900
    Epoch 6/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.2816 - accuracy: 0.8959
    Epoch 7/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.2704 - accuracy: 0.8999
    Epoch 8/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.2594 - accuracy: 0.9031
    Epoch 9/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.2488 - accuracy: 0.9055
    Epoch 10/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.2403 - accuracy: 0.9091
    Epoch 11/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.2317 - accuracy: 0.9128
    Epoch 12/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.2250 - accuracy: 0.9160
    Epoch 13/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.2175 - accuracy: 0.9179
    Epoch 14/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.2124 - accuracy: 0.9202
    Epoch 15/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.2054 - accuracy: 0.9225
    Epoch 16/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.1993 - accuracy: 0.9245
    Epoch 17/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.1944 - accuracy: 0.9273
    Epoch 18/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.1894 - accuracy: 0.9286
    Epoch 19/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.1828 - accuracy: 0.9311
    Epoch 20/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.1809 - accuracy: 0.9317
    Epoch 21/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.1749 - accuracy: 0.9338
    Epoch 22/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.1719 - accuracy: 0.9345
    Epoch 23/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.1645 - accuracy: 0.9387
    Epoch 24/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.1624 - accuracy: 0.9388
    Epoch 25/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.1599 - accuracy: 0.9402
    Epoch 26/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.1558 - accuracy: 0.9419
    Epoch 27/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.1524 - accuracy: 0.9431
    Epoch 28/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.1472 - accuracy: 0.9444
    Epoch 29/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.1466 - accuracy: 0.9452
    Epoch 30/30
    1875/1875 [==============================] - 4s 2ms/step - loss: 0.1420 - accuracy: 0.9469

    <keras.callbacks.History at 0x7f326fff3370>

As the model trains, the loss and accuracy metrics are displayed. This
model reaches an accuracy of about 0.91 (or 91%) on the training data.

Evaluate accuracy

Next, compare how the model performs on the test dataset:

    test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)

    print('\nTest accuracy:', test_acc)

    313/313 - 0s - loss: 0.4365 - accuracy: 0.8796 - 481ms/epoch - 2ms/step

    Test accuracy: 0.8795999884605408

It turns out that the accuracy on the test dataset is a little less than
the accuracy on the training dataset. This gap between training accuracy
and test accuracy represents overfitting. Overfitting happens when a
machine learning model performs worse on new, previously unseen inputs
than it does on the training data. An overfitted model "memorizes" the
noise and details in the training dataset to a point where it negatively
impacts the performance of the model on the new data. For more
information, see the following:

-   Demonstrate overfitting
-   Strategies to prevent overfitting

Make predictions

With the model trained, you can use it to make predictions about some
images. Attach a softmax layer to convert the model's linear
outputs—logits—to probabilities, which should be easier to interpret.

    probability_model = tf.keras.Sequential([model, 
                                             tf.keras.layers.Softmax()])

    predictions = probability_model.predict(test_images)

    313/313 [==============================] - 0s 1ms/step

Here, the model has predicted the label for each image in the testing
set. Let's take a look at the first prediction:

    predictions[0]

    array([3.8219037e-12, 6.0263157e-12, 1.1343045e-19, 5.9180233e-16,
           1.9016950e-22, 4.5273669e-08, 5.1865828e-16, 1.9605557e-05,
           1.2793957e-13, 9.9998027e-01], dtype=float32)

A prediction is an array of 10 numbers. They represent the model's
"confidence" that the image corresponds to each of the 10 different
articles of clothing. You can see which label has the highest confidence
value:

    np.argmax(predictions[0])

    9

So, the model is most confident that this image is an ankle boot, or
class_names[9]. Examining the test label shows that this classification
is correct:

    test_labels[0]

    9

Graph this to look at the full set of 10 class predictions.

    def plot_image(i, predictions_array, true_label, img):
      true_label, img = true_label[i], img[i]
      plt.grid(False)
      plt.xticks([])
      plt.yticks([])

      plt.imshow(img, cmap=plt.cm.binary)

      predicted_label = np.argmax(predictions_array)
      if predicted_label == true_label:
        color = 'blue'
      else:
        color = 'red'

      plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
                                    100*np.max(predictions_array),
                                    class_names[true_label]),
                                    color=color)

    def plot_value_array(i, predictions_array, true_label):
      true_label = true_label[i]
      plt.grid(False)
      plt.xticks(range(10))
      plt.yticks([])
      thisplot = plt.bar(range(10), predictions_array, color="#777777")
      plt.ylim([0, 1])
      predicted_label = np.argmax(predictions_array)

      thisplot[predicted_label].set_color('red')
      thisplot[true_label].set_color('blue')

Verify predictions

With the model trained, you can use it to make predictions about some
images.

Let's look at the 0th image, predictions, and prediction array. Correct
prediction labels are blue and incorrect prediction labels are red. The
number gives the percentage (out of 100) for the predicted label.

    i = 0
    plt.figure(figsize=(6,3))
    plt.subplot(1,2,1)
    plot_image(i, predictions[i], test_labels, test_images)
    plt.subplot(1,2,2)
    plot_value_array(i, predictions[i],  test_labels)
    plt.show()

[]

    i = 12
    plt.figure(figsize=(6,3))
    plt.subplot(1,2,1)
    plot_image(i, predictions[i], test_labels, test_images)
    plt.subplot(1,2,2)
    plot_value_array(i, predictions[i],  test_labels)
    plt.show()

[]

Let's plot several images with their predictions. Note that the model
can be wrong even when very confident.

    # Plot the first X test images, their predicted labels, and the true labels.
    # Color correct predictions in blue and incorrect predictions in red.
    num_rows = 5
    num_cols = 3
    num_images = num_rows*num_cols
    plt.figure(figsize=(2*2*num_cols, 2*num_rows))
    for i in range(num_images):
      plt.subplot(num_rows, 2*num_cols, 2*i+1)
      plot_image(i, predictions[i], test_labels, test_images)
      plt.subplot(num_rows, 2*num_cols, 2*i+2)
      plot_value_array(i, predictions[i], test_labels)
    plt.tight_layout()
    plt.show()

[]

Use the trained model

Finally, use the trained model to make a prediction about a single
image.

    # Grab an image from the test dataset.
    img = test_images[1]

    print(img.shape)

    (28, 28)

tf.keras models are optimized to make predictions on a batch, or
collection, of examples at once. Accordingly, even though you're using a
single image, you need to add it to a list:

    # Add the image to a batch where it's the only member.
    img = (np.expand_dims(img,0))

    print(img.shape)

    (1, 28, 28)

Now predict the correct label for this image:

    predictions_single = probability_model.predict(img)

    print(predictions_single)

    1/1 [==============================] - 0s 19ms/step
    [[2.3126481e-06 1.3403139e-21 9.9972457e-01 6.3178419e-14 2.6131392e-04
      7.6748816e-20 1.1800360e-05 6.7637641e-20 1.6529707e-15 6.0258504e-21]]

    plot_value_array(1, predictions_single[0], test_labels)
    _ = plt.xticks(range(10), class_names, rotation=45)
    plt.show()

[]

tf.keras.Model.predict returns a list of lists—one list for each image
in the batch of data. Grab the predictions for our (only) image in the
batch:

    np.argmax(predictions_single[0])

    2

And the model predicts a label as expected.
